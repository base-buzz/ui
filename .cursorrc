{
  "context": [
    "apps/docs/pages/README.md",
    "apps/docs/pages/technical-guide.md",
    "apps/docs/pages/user-guide.md",
    "apps/docs/pages/design-system.md",
    "apps/docs/pages/api-reference.md",
    "apps/docs/pages/mcp-supabase-commands.md",
    "apps/www/docs/git.md"
  ],
  "prioritize": [
    "apps/docs/pages/README.md",
    "apps/docs/pages/technical-guide.md",
    "apps/docs/pages/user-guide.md",
    "apps/docs/pages/mcp-supabase-commands.md",
    "apps/www/docs/git.md"
  ],
  "meta": {
    "notes": "IMPORTANT: Service name is BaseBuzz (no space)\n\nCursor AI should always include inline comments and docstrings when generating code. Always add any files containing sensitive information to .gitinore and let me know. All logic must be clearly explained with contextual comments, and when applicable, reference related markdown files using `// See apps/docs/pages/<filename>.md`. Use functional React components with TypeScript and arrow functions by default. ShadCN UI components must be used for all UI unless explicitly unavailable. Prefer `const` for variable declarations. Tailwind utility class order must follow standard logical grouping. Component and file structure must follow conventions defined in apps/docs/pages/technical-guide.md. All user input must be validated with zod. Code should be clean, modular, readable, and performance-aware. Avoid unnecessary dependencies or complex abstractions. All server logic should be wrapped in async functions with proper try/catch error handling. Use only pre-approved libraries like lucide-react, wagmi, and zod unless instructed otherwise. When suggesting code changes, always include the file path in the code block header using the format ```typescript:path/to/file.tsx``` to clearly indicate which file is being modified.\n\nIMPORTANT DOCUMENTATION NOTE:\n- The apps/www/content/docs/ directory is from the shadcn fork and is for reference only\n- We do NOT put any files in content/docs\n- All our documentation goes in apps/www/docs/\n- Private documentation goes in apps/www/docs/private/ (Git submodule)\n\nVERCEL DEPLOYMENT CONFIGURATION:\n- Public docs are in apps/www/docs/\n- Private docs are in apps/www/docs/private/ (Git submodule)\n- Vercel must only deploy public docs\n- .vercelignore must include docs/private/ to ignore private submodule\n- vercel.json must have correct build settings and memory limits\n- Always test build locally with pnpm build before deploying\n\nGIT COMMIT REQUIREMENTS:\nBefore suggesting any git commit, Cursor AI MUST:\n1. Read and understand the Git Guidelines in apps/www/docs/git.md\n2. Complete the Pre-Commit Checklist from the Git Guidelines\n3. Verify all documentation changes are in the correct location (public vs private)\n4. Ensure no private documentation is exposed\n5. Test the build process locally\n6. Use conventional commit message format\n7. Verify workspace and monorepo configurations\n8. Check for any security implications\n\nDOCUMENTATION CHECK RULE:\nBefore suggesting any git commit, Cursor AI must:\n1. Read and understand all relevant documentation in apps/www/docs/\n2. Confirm that changes align with documented conventions and requirements\n3. Verify that no private documentation is being exposed\n4. Ensure all changes are properly documented in the public docs if needed",
    "package_manager": "pnpm",
    "python_version": "3.11"
  }
}
